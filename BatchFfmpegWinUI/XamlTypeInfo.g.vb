'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Namespace Global.BatchFfmpegWinUI

    Partial Public Class App
        Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>
        Private __appProvider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlMetaDataProvider

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Private ReadOnly Property _AppProvider() As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlMetaDataProvider
            Get
                If __appProvider Is Nothing Then
                    __appProvider = New Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlMetaDataProvider()
                End If
                Return __appProvider
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Function GetXamlType(type As Global.System.Type) As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXamlType
            Return _AppProvider.GetXamlType(type)
        End Function

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Function GetXamlType(fullName As String) As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXamlType
            Return _AppProvider.GetXamlType(fullName)
        End Function

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>
        Public Function GetXmlnsDefinitions() As Global.Microsoft.UI.Xaml.Markup.XmlnsDefinition() Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXmlnsDefinitions
            Return _AppProvider.GetXmlnsDefinitions()
        End Function
    End Class

End Namespace

Namespace Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>  _
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public NotInheritable Class XamlMetaDataProvider
        Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
        Private _provider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider
        Private ReadOnly Property Provider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider
            Get
                If _provider Is Nothing
                    _provider = New Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider()
                End If
                Return _provider
            End Get
        End Property

        Public Function GetXamlType(type as Global.System.Type) As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXamlType
            Return Provider.GetXamlTypeByType(type)
        End Function

        Public Function GetXamlType(fullName As String) As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXamlType
            Return Provider.GetXamlTypeByName(fullName)
        End Function

        Public Function GetXmlnsDefinitions() As Global.Microsoft.UI.Xaml.Markup.XmlnsDefinition() Implements Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider.GetXmlnsDefinitions
            Return New Global.Microsoft.UI.Xaml.Markup.XmlnsDefinition() {}
        End Function
    End Class

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>  _
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Class XamlTypeInfoProvider
        Public Function GetXamlTypeByType(ByVal type As Global.System.Type) As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Dim xamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = Nothing
            SyncLock _xamlTypeCacheByType
                If _xamlTypeCacheByType.TryGetValue(type, xamlType) Then
                    Return xamlType
                End If
                Dim typeIndex As Integer = LookupTypeIndexByType(type)
                If typeIndex <> -1 Then
                    xamlType = CreateXamlType(typeIndex)
                End If
                Dim userXamlType As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType = TryCast(xamlType, Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType)
                If xamlType Is Nothing Or (userXamlType IsNot Nothing AndAlso userXamlType.IsReturnTypeStub AndAlso Not userXamlType.IsLocalType) Then
                    Dim libXamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType  = CheckOtherMetadataProvidersForType(type)
                    If libXamlType IsNot Nothing Then
                        If libXamlType.IsConstructible Or xamlType Is Nothing
                            xamlType = libXamlType
                        End If
                    End If
                End If
                If xamlType IsNot Nothing Then
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType)
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType)
                End If
            End SyncLock
            Return xamlType
        End Function

        Public Function GetXamlTypeByName(ByVal typeName As String) As Global.Microsoft.UI.Xaml.Markup.IXamlType
            If String.IsNullOrEmpty(typeName) Then
                Return Nothing
            End If
            Dim xamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = Nothing
            SyncLock _xamlTypeCacheByType
                If _xamlTypeCacheByName.TryGetValue(typeName, xamlType) Then
                    Return xamlType
                End If
                Dim typeIndex As Integer = LookupTypeIndexByName(typeName)
                if typeIndex <> -1 Then
                    xamlType = CreateXamlType(typeIndex)
                End If
                Dim userXamlType As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType = TryCast(xamlType, Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType)
                If xamlType Is Nothing Or (userXamlType IsNot Nothing AndAlso userXamlType.IsReturnTypeStub AndAlso Not userXamlType.IsLocalType) Then
                    Dim libXamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = CheckOtherMetadataProvidersForName(typeName)
                    If libXamlType IsNot Nothing Then
                        If libXamlType.IsConstructible Or xamlType Is Nothing
                            xamlType = libXamlType
                        End If
                    End If
                End If
                If xamlType IsNot Nothing
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType)
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType)
                End If
            End SyncLock
            Return xamlType
        End Function

        Public Function GetMemberByLongName(ByVal longMemberName As String) As Global.Microsoft.UI.Xaml.Markup.IXamlMember
            If String.IsNullOrEmpty(longMemberName) Then
                Return Nothing
            End If
            Dim xamlMember As Global.Microsoft.UI.Xaml.Markup.IXamlMember = Nothing
            SyncLock _xamlMembers
                If _xamlMembers.TryGetValue(longMemberName, xamlMember) Then
                    Return xamlMember
                End If
                xamlMember = CreateXamlMember(longMemberName)
                If xamlMember IsNot Nothing Then
                    _xamlMembers.Add(longMemberName, xamlMember)
                End If
            End SyncLock
            Return xamlMember
        End Function

        Private _xamlTypeCacheByName As New Global.System.Collections.Generic.Dictionary(Of String, Global.Microsoft.UI.Xaml.Markup.IXamlType)()
        Private _xamlTypeCacheByType As New Global.System.Collections.Generic.Dictionary(Of Global.System.Type, Global.Microsoft.UI.Xaml.Markup.IXamlType)()
        Private _xamlMembers As New Global.System.Collections.Generic.Dictionary(Of String, Global.Microsoft.UI.Xaml.Markup.IXamlMember)()

        Private _typeNameTable(3) As String
        Private _typeTable(3) As Global.System.Type

        Private Sub InitTypeTables()
            _typeNameTable(0) = "Microsoft.UI.Xaml.Controls.XamlControlsResources"
            _typeNameTable(1) = "Microsoft.UI.Xaml.ResourceDictionary"
            _typeNameTable(2) = "Object"
            _typeNameTable(3) = "Boolean"
            _typeTable(0) = GetType(Global.Microsoft.UI.Xaml.Controls.XamlControlsResources)
            _typeTable(1) = GetType(Global.Microsoft.UI.Xaml.ResourceDictionary)
            _typeTable(2) = GetType(Global.System.Object)
            _typeTable(3) = GetType(Global.System.Boolean)
        End Sub

        Private Function LookupTypeIndexByName(ByVal typeName As String) As Integer
            If _typeNameTable(0) Is Nothing
                InitTypeTables()
            End If
            For i As Integer = 0 To _typeNameTable.Length - 1
                If 0 = String.CompareOrdinal(_typeNameTable(i), typeName) Then
                    Return i
                End If
            Next i
            Return -1
        End Function

        Private Function LookupTypeIndexByType(ByVal type As Global.System.Type) As Integer
            If _typeTable(0) Is Nothing
                InitTypeTables()
            End If
            For i As Integer = 0 To _typeTable.Length - 1
                If Global.System.Type.Equals(type, _typeTable(i)) Then
                    Return i
                End If
            Next
            Return -1
        End Function

        Private Function Activate_0_XamlControlsResources() As Global.System.Object
            Return New Global.Microsoft.UI.Xaml.Controls.XamlControlsResources()
        End Function

        Private Sub MapAdd_0_XamlControlsResources(instance As Global.System.Object, key As Global.System.Object, item As Global.System.Object)
            Dim collection As Global.System.Collections.Generic.IDictionary(Of Global.System.Object, Global.System.Object) = CType(instance, Global.System.Collections.Generic.IDictionary(Of Global.System.Object, Global.System.Object))
            Dim newKey As Global.System.Object = CType(key, Global.System.Object)
            Dim newItem As Global.System.Object = CType(item, Global.System.Object)
            collection.Add(newKey, newItem)
        End Sub


        Private Function CreateXamlType(ByVal typeIndex As Integer) As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Dim xamlType As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlSystemBaseType = Nothing
            Dim userType As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType
            Dim typeName As String = _typeNameTable(typeIndex)
            Dim type As Global.System.Type = _typeTable(typeIndex)

            Select Case typeIndex
            Case 0     ' Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = New Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType(Me, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"))
                userType.Activator = AddressOf Activate_0_XamlControlsResources
                userType.DictionaryAdd = AddressOf MapAdd_0_XamlControlsResources
                userType.AddMemberName("UseCompactResources")
                xamlType = userType

            Case 1     ' Microsoft.UI.Xaml.ResourceDictionary
                xamlType = New Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type)

            Case 2     ' Object
                xamlType = New Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type)

            Case 3     ' Boolean
                xamlType = New Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlSystemBaseType(typeName, type)

            End Select
            Return xamlType
        End Function


        Private Dim _otherProviders As List(Of Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider)
        Private ReadOnly Property OtherProviders As List(Of Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider)
            Get
                If _otherProviders Is Nothing
                    Dim otherProvidersTmp As List(Of Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider) = New List(Of Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider)()
                    Dim provider As Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
                    provider = New Global.Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider()
                    otherProvidersTmp.Add(provider)
                    _otherProviders = otherProvidersTmp
                End If
                Return _otherProviders
            End Get
        End Property

        Private Function CheckOtherMetadataProvidersForName(typeName As String) As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Dim xamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = Nothing
            Dim foundXamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = Nothing
            For Each xmp As Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider In OtherProviders
                xamlType = xmp.GetXamlType(typeName)
                if xamlType IsNot Nothing Then
                    If xamlType.IsConstructible Then    ' not Constructible means it might be a Return Type Stub
                        Return xamlType
                    End If
                    foundXamlType = xamlType
                End If
            Next xmp
            Return foundXamlType
        End Function

        Private Function CheckOtherMetadataProvidersForType(type As Global.System.Type) As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Dim xamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = Nothing
            Dim foundXamlType As Global.Microsoft.UI.Xaml.Markup.IXamlType = Nothing
            For Each xmp As Global.Microsoft.UI.Xaml.Markup.IXamlMetadataProvider In OtherProviders
                xamlType = xmp.GetXamlType(type)
                if xamlType IsNot Nothing Then
                    If xamlType.IsConstructible Then    ' not Constructible means it might be a Return Type Stub
                        Return xamlType
                    End If
                    foundXamlType = xamlType
                End If
            Next xmp
            Return foundXamlType
        End Function

        Private Function get_0_XamlControlsResources_UseCompactResources(ByVal instance As Global.System.Object) As Global.System.Object
            Dim that As Global.Microsoft.UI.Xaml.Controls.XamlControlsResources = CType(instance, Global.Microsoft.UI.Xaml.Controls.XamlControlsResources)
            Return that.UseCompactResources
        End Function
        Private Sub set_0_XamlControlsResources_UseCompactResources(ByVal instance As Global.System.Object, ByVal Value As Global.System.Object)
            Dim that As Global.Microsoft.UI.Xaml.Controls.XamlControlsResources = CType(instance, Global.Microsoft.UI.Xaml.Controls.XamlControlsResources)
            that.UseCompactResources = CType(Value, Global.System.Boolean)
        End Sub

        Private Function CreateXamlMember(ByVal longMemberName As String) As XamlMember
            Dim xamlMember As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlMember = Nothing
            Dim userType As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType

            Select Case longMemberName
            Case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources"
                userType = CType(GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources"), Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlUserType)
                xamlMember = new Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlMember(Me, "UseCompactResources", "Boolean")
                xamlMember.SetIsDependencyProperty()
                xamlMember.Getter = AddressOf get_0_XamlControlsResources_UseCompactResources
                xamlMember.Setter = AddressOf set_0_XamlControlsResources_UseCompactResources
            End Select
            Return xamlMember
        End Function

    End Class

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>  _
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Class XamlSystemBaseType
        Implements Global.Microsoft.UI.Xaml.Markup.IXamlType
        Private _fullName As String
        Private _underlyingType As Global.System.Type

        Public Sub New(ByVal fullName As String, ByVal underlyingType As Global.System.Type)
            _fullName = fullName
            _underlyingType = underlyingType
        End Sub

        Public ReadOnly Property UnderlyingType As Global.System.Type Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.UnderlyingType
            Get
                Return _underlyingType
            End Get
        End Property

        Public Overridable ReadOnly Property FullName() As String Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.FullName
            Get
                Return _fullName
            End Get
        End Property

        Public Overridable ReadOnly Property BaseType() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.BaseType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property ContentProperty() As Global.Microsoft.UI.Xaml.Markup.IXamlMember Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.ContentProperty
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable Function GetMember(ByVal name As String) As Global.Microsoft.UI.Xaml.Markup.IXamlMember Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.GetMember
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable ReadOnly Property IsArray() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.IsArray
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property IsCollection() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.IsCollection
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property
        Public Overridable ReadOnly Property IsConstructible() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.IsConstructible
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property IsDictionary() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.IsDictionary
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property IsMarkupExtension() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.IsMarkupExtension
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable  ReadOnly Property IsBindable() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.IsBindable
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property ItemType() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.ItemType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property KeyType() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.KeyType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable ReadOnly Property BoxedType() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.BoxedType
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable Function ActivateInstance() As Global.System.Object Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.ActivateInstance
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable Sub AddToMap(ByVal instance As Global.System.Object, ByVal key As Global.System.Object, ByVal item As Global.System.Object) Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.AddToMap
            Throw New Global.System.NotImplementedException()
        End Sub

        Public Overridable Sub AddToVector(ByVal instance As Global.System.Object, ByVal item As Global.System.Object) Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.AddToVector
            Throw New Global.System.NotImplementedException()
        End Sub

        Public Overridable Sub RunInitializer() Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.RunInitializer
            Throw New Global.System.NotImplementedException()
        End Sub

        Public Overridable Function CreateFromString(ByVal input As String) As Global.System.Object Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.CreateFromString
            Throw New Global.System.NotImplementedException()
        End Function

        Public Overridable  ReadOnly Property IsReturnTypeStub() As Boolean
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property

        Public Overridable  ReadOnly Property IsLocalType() As Boolean
            Get
                Throw New Global.System.NotImplementedException()
            End Get
        End Property
    End Class

    Friend Delegate Function Activator() As Global.System.Object
    Friend Delegate Sub AddToCollection(instance As Global.System.Object, item As Global.System.Object)
    Friend Delegate Sub AddToDictionary(instance As Global.System.Object, key As Global.System.Object, item As Global.System.Object)
    Friend Delegate Function CreateFromStringMethod(input As String) As Global.System.Object
    Friend Delegate Function BoxInstanceMethod(input As Global.System.Object) As Global.System.Object

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>  _
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Class XamlUserType
        Inherits Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlSystemBaseType
        Implements Global.Microsoft.UI.Xaml.Markup.IXamlType
        Private _provider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider
        Private _baseType As Global.Microsoft.UI.Xaml.Markup.IXamlType
        Private _isArray As Boolean
        Private _isMarkupExtension As Boolean
        Private _isBindable As Boolean
        Private _isReturnTypeStub As Boolean
        Private _isLocalType As Boolean
        Private _boxedType As Global.Microsoft.UI.Xaml.Markup.IXamlType

        Private _contentPropertyName As String
        Private _itemTypeName As String
        Private _keyTypeName As String
        Private _memberNames As Dictionary(Of String, String)
        Private _enumValues As Dictionary(Of String, Global.System.Object)

        Public Sub New(ByVal provider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider, ByVal fullName As String, ByVal fullType As Global.System.Type, ByVal baseType As Global.Microsoft.UI.Xaml.Markup.IXamlType)
            MyBase.New(fullName, fullType)
            _provider = provider
            _baseType = baseType
        End Sub

        ' --- Interface methods ----

        Public Overrides ReadOnly Property BaseType() As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Get
                Return _baseType
            End Get
        End Property

        Public Overrides ReadOnly Property IsArray() As Boolean
            Get
                Return _isArray
            End Get
        End Property

        Public Overrides ReadOnly Property IsCollection() As Boolean
            Get
                Return CollectionAdd <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsConstructible() As Boolean
            Get
                Return Activator <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsDictionary() As Boolean
            Get
                Return DictionaryAdd <> Nothing
            End Get
        End Property

        Public Overrides ReadOnly Property IsMarkupExtension() As Boolean
            Get
                Return _isMarkupExtension
            End Get
        End Property

        Public Overrides ReadOnly Property IsBindable() as Boolean
            Get
                Return _isBindable
            End Get
        End Property

        Public Overrides ReadOnly Property ContentProperty() As Global.Microsoft.UI.Xaml.Markup.IXamlMember
            Get
                Return _provider.GetMemberByLongName(_contentPropertyName)
            End Get
        End Property

        Public Overrides ReadOnly Property ItemType() As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Get
                Return _provider.GetXamlTypeByName(_itemTypeName)
            End Get
        End Property

        Public Overrides ReadOnly Property KeyType() As Global.Microsoft.UI.Xaml.Markup.IXamlType
            Get
                Return _provider.GetXamlTypeByName(_keyTypeName)
            End Get
        End Property

        Public Overrides Function GetMember(ByVal name As String) As Global.Microsoft.UI.Xaml.Markup.IXamlMember
            If _memberNames Is Nothing Then
                Return Nothing
            End If
            Dim longName As String = Nothing
            If _memberNames.TryGetValue(name, longName) Then
                Return _provider.GetMemberByLongName(longName)
            End If
            Return Nothing
        End Function

        Public Overrides Function ActivateInstance() As Global.System.Object
            Return Activator.Invoke()
        End Function

        Public Overrides Sub AddToMap(ByVal instance As Global.System.Object, ByVal key As Global.System.Object, ByVal item As Global.System.Object)
            DictionaryAdd.Invoke(instance, key, item)
        End Sub

        Public Overrides Sub AddToVector(ByVal instance As Global.System.Object, ByVal item As Global.System.Object)
            CollectionAdd.Invoke(instance, item)
        End Sub

        Public Overrides Sub RunInitializer()
            Global.System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle)
        End Sub

        Public Overrides Function CreateFromString(ByVal input As String) As Global.System.Object
            If BoxedType IsNot Nothing Then
                Return BoxInstance(BoxedType.CreateFromString(input))
            End If

            If CreateFromStringMethod IsNot Nothing Then
                Return CreateFromStringMethod.Invoke(input)
            ElseIf  Not _enumValues Is Nothing Then
                Dim returnValue As Int32 = 0

                Dim valueParts As String() = input.Split(New [Char]() {","c})

                For Each valuePart As String In valueParts
                    Dim partValue As Global.System.Object = Nothing
                    Dim enumFieldValue As Int32 = 0
                    Try
                        If _enumValues.TryGetValue(valuePart.Trim(), partValue) Then
                            enumFieldValue = Convert.ToInt32(partValue)
                        Else
                            Try
                                enumFieldValue = Convert.ToInt32(valuePart.Trim())
                            Catch ex As FormatException
                                For Each key As String In _enumValues.Keys
                                    If String.Compare(valuePart.Trim(), key, Global.System.StringComparison.OrdinalIgnoreCase) = 0 Then
                                        If _enumValues.TryGetValue(key.Trim(), partValue) Then
                                            enumFieldValue = Convert.ToInt32(partValue)
                                        End If
                                        Exit For
                                    End If
                                Next
                            End Try
                        End If

                        returnValue = returnValue Or enumFieldValue

                    Catch ex As Exception
                        Throw New ArgumentException(input, FullName)
                    End Try
                Next valuePart

                Return returnValue

            End If
            Throw New ArgumentException(input, FullName)
        End Function

        ' ---- End of Interface Methods

        Public Overrides ReadOnly Property IsReturnTypeStub() As Boolean
            Get
                Return _isReturnTypeStub
            End Get
        End Property

        Public Overrides ReadOnly Property IsLocalType() As Boolean
            Get
                Return _isLocalType
            End Get
        End Property

        Public ReadOnly Property BoxedType() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlType.BoxedType
            Get
                Return _boxedType
            End Get
        End Property

        Public Property Activator() As Activator
        Public Property CollectionAdd() As AddToCollection
        Public Property DictionaryAdd() As AddToDictionary
        Public Property CreateFromStringMethod() As CreateFromStringMethod
        Public Property BoxInstance As BoxInstanceMethod

        Public Sub SetContentPropertyName(ByVal contentPropertyName As String)
            _contentPropertyName = contentPropertyName
        End Sub

        Public Sub SetIsArray()
            _isArray = True
        End Sub

        Public Sub SetIsMarkupExtension()
            _isMarkupExtension = True
        End Sub

        Public Sub SetIsBindable()
            _isBindable = True
        End Sub

        Public Sub SetIsReturnTypeStub()
            _isReturnTypeStub = True
        End Sub

        Public Sub SetIsLocalType()
            _isLocalType = True
        End Sub

        Public Sub SetItemTypeName(ByVal itemTypeName As String)
            _itemTypeName = itemTypeName
        End Sub

        Public Sub SetKeyTypeName(ByVal keyTypeName As String)
            _keyTypeName = keyTypeName
        End Sub

        Public Sub SetBoxedType(ByVal boxedType As Global.Microsoft.UI.Xaml.Markup.IXamlType)
            _boxedType = boxedType
        End Sub

        Public Function BoxType (Of t As Structure)(ByVal instance As Global.System.Object) As Global.System.Object
            Dim unwrapped As t= CType(instance, t)
            Return New Global.System.Nullable(Of t)(unwrapped)
        End Function

        Public Sub AddMemberName(ByVal shortName As String)
            If _memberNames Is Nothing Then
                _memberNames = New Global.System.Collections.Generic.Dictionary(Of String,String)()
            End If
            _memberNames.Add(shortName, FullName + "." +shortName)
        End Sub

        Public Sub AddEnumValue(ByVal name As String, ByVal value As Global.System.Object)
            If _enumValues Is Nothing Then
                _enumValues = New Global.System.Collections.Generic.Dictionary(Of String,Global.System.Object)()
            End If
            _enumValues.Add(name, value)
        End Sub
    End Class

    Friend Delegate Function Getter(ByVal instance As Global.System.Object) As Global.System.Object
    Friend Delegate Sub Setter(ByVal instance As Global.System.Object, ByVal value As Global.System.Object)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler", " 1.0.0.0")>  _
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Class XamlMember
        Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember
        Private _provider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider
        Private _name As String
        Private _isAttachable As Boolean
        Private _isDependencyProperty As Boolean
        Private _isReadOnly As Boolean

        Private _typeName As String
        Private _targetTypeName As String

        Public Sub New(ByVal provider As Global.BatchFfmpegWinUI.BatchFfmpegWinUI_XamlTypeInfo.XamlTypeInfoProvider, ByVal name As String, ByVal typeName As String)
            _name = name
            _typeName = typeName
            _provider = provider
        End Sub

        Public ReadOnly Property Name() As String Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.Name
            Get
                Return _name
            End Get
        End Property

        Public ReadOnly Property Type() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.Type
            Get
                Return _provider.GetXamlTypeByName(_typeName)
            End Get
        End Property

        Public Sub SetTargetTypeName(targetTypeName as String)
            _targetTypeName = targetTypeName
        End Sub
        Public ReadOnly Property TargetType() As Global.Microsoft.UI.Xaml.Markup.IXamlType Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.TargetType
            Get
                Return _provider.GetXamlTypeByName(_targetTypeName)
            End Get
        End Property

        Public Sub SetIsAttachable()
            _isAttachable = True
        End Sub
        Public ReadOnly Property IsAttachable() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.IsAttachable
            Get
                Return _isAttachable
            End Get
        End Property

        Public Sub SetIsDependencyProperty()
            _isDependencyProperty = True
        End Sub

        Public ReadOnly Property IsDependencyProperty() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.IsDependencyProperty
            Get
                Return _isDependencyProperty
            End Get
        End Property

        Public Sub SetIsReadOnly()
            _isReadOnly = True
        End Sub

        Public ReadOnly Property IsReadOnly() As Boolean Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.IsReadOnly
            Get
                Return _isReadOnly
            End Get
        End Property

        Public Property Getter() As Getter
        Public Function GetValue(ByVal instance As Global.System.Object) As Global.System.Object Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.GetValue
            If Getter IsNot Nothing Then
                Return Getter.Invoke(instance)
            Else
                Throw New Global.System.InvalidOperationException("GetValue")
            End If
        End Function

        Public Property Setter() As Setter
        Public Sub SetValue(ByVal instance As Global.System.Object, ByVal value As Global.System.Object) Implements Global.Microsoft.UI.Xaml.Markup.IXamlMember.SetValue
            If Setter IsNot Nothing Then
                Setter.Invoke(instance, value)
            Else
                Throw New Global.System.InvalidOperationException("SetValue")
            End If
        End Sub
    End Class
End Namespace

